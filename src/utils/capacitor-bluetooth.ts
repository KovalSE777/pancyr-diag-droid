import { DiagnosticData, SystemType } from '@/types/bluetooth';
import {
  buildUCONF,
  buildUOKS,
  buildUOKP,
  buildCyclicPoll,
  parseBskuPacket,
  BskuPacketType,
  type BskuPacket
} from './protocol-parser';
import { Screen4Parser } from './screen4-parser';
import { logService } from './log-service';
import { HexFrame } from '@/components/diagnostics/LiveHexMonitor';
import { NativeBluetoothWrapper } from './native-bluetooth';
import { bytesToHex, hexToBytes, formatBytes } from './hex';
import { BT_TIMING, DATA_LIMITS } from './bluetooth-constants';

export class CapacitorBluetoothService {
  private deviceAddress: string | null = null;
  private latestData: DiagnosticData | null = null;
  private systemType: SystemType = 'SKA';
  private hexFrames: HexFrame[] = [];
  private onFramesUpdate?: (frames: HexFrame[]) => void;
  private bt: NativeBluetoothWrapper = new NativeBluetoothWrapper();
  private cyclicPollInterval: NodeJS.Timeout | null = null;
  private receiveBuffer = new Uint8Array(0); // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  
  async initialize(): Promise<void> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
    logService.success('BT Serial', 'Native Bluetooth ready');
  }

  async connect(systemType: 'SKA' | 'SKE' = 'SKA'): Promise<boolean> {
    // –î–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è MAC –∞–¥—Ä–µ—Å
    logService.error('BT Serial', 'Use connectToDeviceId with MAC address');
    return false;
  }

  async connectToDeviceId(deviceAddress: string, systemType: SystemType = 'SKA'): Promise<boolean> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è systemType
      if (systemType !== 'SKA' && systemType !== 'SKE') {
        logService.error('BT Serial', `Invalid systemType: "${systemType}"`);
        throw new Error(`Invalid systemType: "${systemType}". Expected SKA or SKE`);
      }
      
      this.systemType = systemType;
      await this.initialize();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MAC-–∞–¥—Ä–µ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      const mac = deviceAddress ?? '';
      if (!/^[0-9A-Fa-f:]{17}$/.test(mac)) {
        logService.error('BT Serial', `MAC not set or invalid: "${mac}"`);
        throw new Error(`MAC not set or invalid: "${mac}"`);
      }
      
      this.deviceAddress = mac;
      
      // 1) –ö–†–ò–¢–ò–ß–ù–û: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –î–û connect()
      this.bt.onBytes((chunk) => {
        logService.info('BT-RX raw', `${formatBytes(chunk)} (len=${chunk.length})`);
        
        const hex = bytesToHex(chunk);
        this.addHexFrame('RX', hex);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        this.handleIncomingData(chunk);
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.bt.onConnectionLost(() => {
        logService.error('BT Serial', 'Connection lost - device disconnected');
        this.stopCyclicPolling();
      });
      
      // 2) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
      await this.bt.connect(mac);
      logService.success('BT Serial', 'Socket connected');
      
      // 3) –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, BT_TIMING.CONNECTION_STABILIZATION_DELAY));
      
      // 4) –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
      await this.startCommunication();
      
      logService.success('BT Serial', 'Ready');
      return true;
    } catch (error) {
      logService.error('BT Serial', `Connection failed: ${error}`);
      return false;
    }
  }

  // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ listener –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞

  async disconnect(): Promise<void> {
    this.stopCyclicPolling();
    
    if (this.deviceAddress) {
      try {
        await this.bt.disconnect();
        this.deviceAddress = null;
        this.receiveBuffer = new Uint8Array(0); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        this.hexFrames = [];
        this.latestData = null;
        
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        logService.error('BT Serial', `Disconnect error: ${error}`);
      }
    }
  }
  
  isConnected(): boolean {
    return this.deviceAddress !== null;
  }
  // –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã hexToBytes/bytesToHex - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ utils/hex.ts

  /**
   * –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –Ω–æ–≤–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É
   * –ë–°–ö–£ –°–ê–ú –ò–ù–ò–¶–ò–ò–†–£–ï–¢ –ü–ï–†–ï–î–ê–ß–£ –î–ê–ù–ù–´–•!
   * –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å - –ë–°–ö–£ —à–ª–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ ~200ms
   */
  private async startCommunication(): Promise<void> {
    logService.info('BT Serial', 'üöÄ Starting communication - waiting for data from BSKU...');
    logService.info('BT Serial', 'üì° BSKU will send data automatically (no polling needed)');
    
    // –ë–°–ö–£ —Å–∞–º –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!
    // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–∞–∫–µ—Ç—ã:
    // - 0x88 = —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è (–∫–∞–∂–¥—ã–µ ~200ms)
    // - 0x66 = –∫–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã —ç–∫—Ä–∞–Ω–∞ (–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–≤–µ—á–∞–µ–º UOKS)
    
    logService.info('BT Serial', '‚úÖ Ready to receive data from BSKU');
  }

  /**
   * –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å (–Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª)
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 38-–±–∞–π—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –æ–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 500ms
   * –ë–°–ö–£ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–∞–∫–µ—Ç–æ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 0xFF
   */
  private startCyclicPolling(): void {
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    this.stopCyclicPolling();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    this.cyclicPollInterval = setInterval(async () => {
      if (!this.isConnected()) {
        logService.warn('BT Serial', 'Not connected, skipping cyclic poll');
        return;
      }
      
      try {
        const pollPacket = buildCyclicPoll();
        await this.sendRaw(pollPacket);
        logService.info('BT Serial', 'üîÑ Cyclic poll sent (38 bytes)');
      } catch (error) {
        logService.error('BT Serial', `Cyclic poll error: ${error}`);
      }
    }, BT_TIMING.PERIODIC_READ_INTERVAL); // 500ms
    
    logService.info('BT Serial', `‚è∞ Cyclic polling started (${BT_TIMING.PERIODIC_READ_INTERVAL}ms interval)`);
  }

  private stopCyclicPolling(): void {
    if (this.cyclicPollInterval) {
      clearInterval(this.cyclicPollInterval);
      this.cyclicPollInterval = null;
      logService.info('BT Serial', '‚è∏Ô∏è  Cyclic polling stopped');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π)
   */
  private handleIncomingData(chunk: Uint8Array): void {
    // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤ –±—É—Ñ–µ—Ä–µ
    const newBuffer = new Uint8Array(this.receiveBuffer.length + chunk.length);
    newBuffer.set(this.receiveBuffer, 0);
    newBuffer.set(chunk, this.receiveBuffer.length);
    this.receiveBuffer = newBuffer;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∞–∫–µ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 0xFF
    this.tryParseNewProtocolPackets();
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∞–∫–µ—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
   * –§–æ—Ä–º–∞—Ç –ë–°–ö–£:
   * - 0x88 = —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è (38 –±–∞–π—Ç)
   * - 0x66 = –∫–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã —ç–∫—Ä–∞–Ω–∞ (7 –±–∞–π—Ç: 66 53 43 52 5F <screenId> <checksum>)
   */
  private async tryParseNewProtocolPackets(): Promise<void> {
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ
    while (this.receiveBuffer.length > 0) {
      const firstByte = this.receiveBuffer[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –±–∞–π—Ç—É
      if (firstByte === 0x88) {
        // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è (38 –±–∞–π—Ç)
        if (this.receiveBuffer.length >= 38) {
          const telemetryPacket = this.receiveBuffer.slice(0, 38);
          logService.info('BT-RX', `üìä Telemetry packet (0x88) - 38 bytes`);
          
          // –ü–∞—Ä—Å–∏—Ç—å —á–µ—Ä–µ–∑ Screen4Parser
          const diagnosticData = Screen4Parser.parse(telemetryPacket, this.systemType);
          
          if (diagnosticData) {
            this.latestData = diagnosticData;
            logService.success('BT-RX', '‚úÖ Telemetry parsed successfully');
            
            // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é HEX —Ñ—Ä–µ–π–º–æ–≤
            const hex = bytesToHex(telemetryPacket);
            this.addHexFrame('RX', hex, true, 'TELEMETRY');
          } else {
            logService.error('BT-RX', 'Failed to parse telemetry');
          }
          
          // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞
          this.receiveBuffer = this.receiveBuffer.slice(38);
        } else {
          // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –µ—â–µ
          break;
        }
      } else if (firstByte === 0x66) {
        // –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã —ç–∫—Ä–∞–Ω–∞ (7 –±–∞–π—Ç: 66 53 43 52 5F <screenId> <checksum>)
        if (this.receiveBuffer.length >= 7) {
          const screenChangePacket = this.receiveBuffer.slice(0, 7);
          
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É "SCR_"
          if (screenChangePacket[1] === 0x53 && 
              screenChangePacket[2] === 0x43 && 
              screenChangePacket[3] === 0x52 && 
              screenChangePacket[4] === 0x5F) {
            
            const screenId = screenChangePacket[5];
            logService.info('BT-RX', `üñ•Ô∏è  Screen change command: Screen ${screenId}`);
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å UOKS –≤ –æ—Ç–≤–µ—Ç
            const uoksPacket = buildUOKS(screenId);
            await this.sendRaw(uoksPacket);
            logService.success('BT-TX', `‚úÖ Sent UOKS for screen ${screenId}`);
            
            // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            const hex = bytesToHex(screenChangePacket);
            this.addHexFrame('RX', hex, true, 'SCREEN_CHANGE');
          } else {
            logService.warn('BT-RX', 'Invalid screen change packet signature');
          }
          
          // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
          this.receiveBuffer = this.receiveBuffer.slice(7);
        } else {
          // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
          break;
        }
      } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 1 –±–∞–π—Ç
        logService.warn('BT-RX', `Unknown packet header: 0x${firstByte.toString(16)}`);
        this.receiveBuffer = this.receiveBuffer.slice(1);
      }
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (this.receiveBuffer.length > 500) {
        logService.warn('BT-RX', 'Buffer overflow, clearing...');
        this.receiveBuffer = new Uint8Array(0);
        break;
      }
    }
  }


  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ parseBskuPacket —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª –ø–∞–∫–µ—Ç
   */
  private async handleBskuPacket(packet: BskuPacket): Promise<void> {
    logService.info('BT-RX BSKU', `üì¶ Packet: Type=${packet.type}, ScreenId=${packet.screenId ?? 'N/A'}, PktId=${packet.pktId ?? 'N/A'}`);
    
    switch (packet.type) {
      case BskuPacketType.SCREEN_CHANGE:
        await this.handleScreenChange(packet);
        break;
        
      case BskuPacketType.CONFIGURATION:
        await this.handleConfiguration(packet);
        break;
        
      case BskuPacketType.TELEMETRY:
        this.handleTelemetry(packet);
        break;
        
      default:
        logService.warn('BT-RX BSKU', `Unknown packet type: ${packet.type}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–µ–π–º–∞ —Å–º–µ–Ω—ã —ç–∫—Ä–∞–Ω–∞ (0x66)
   * –§–æ—Ä–º–∞—Ç: 0xFF...0xFF 0x66 "SCR_" + screenId
   * –û—Ç–≤–µ—Ç: UOKS + screenId
   */
  private async handleScreenChange(packet: BskuPacket): Promise<void> {
    logService.info('BT-RX BSKU', `üñ•Ô∏è  Screen change detected: Screen ${packet.screenId}`);
    
    if (packet.screenId !== undefined) {
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ UOKS
      const uoksPacket = buildUOKS(packet.screenId);
      await this.sendRaw(uoksPacket);
      logService.success('BT-TX', `‚úÖ Sent UOKS acknowledgment for screen ${packet.screenId}`);
    } else {
      logService.error('BT-RX BSKU', 'Screen change packet missing screenId');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (0x77)
   * –§–æ—Ä–º–∞—Ç: 0xFF...0xFF 0x77 pktId + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * –û—Ç–≤–µ—Ç: UOKP + pktId
   */
  private async handleConfiguration(packet: BskuPacket): Promise<void> {
    logService.info('BT-RX BSKU', `‚öôÔ∏è  Configuration packet received: Packet ${packet.pktId}`);
    
    if (packet.pktId !== undefined) {
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ UOKP
      const uokpPacket = buildUOKP(packet.pktId);
      await this.sendRaw(uokpPacket);
      logService.success('BT-TX', `‚úÖ Sent UOKP acknowledgment for packet ${packet.pktId}`);
      
      // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // packet.data —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ pktId
    } else {
      logService.error('BT-RX BSKU', 'Configuration packet missing pktId');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
   * –§–æ—Ä–º–∞—Ç: 0xFF...0xFF screenId + –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
   * –ü–∞—Ä—Å–∏—Ç—Å—è —á–µ—Ä–µ–∑ Screen4Parser
   */
  private handleTelemetry(packet: BskuPacket): void {
    logService.info('BT-RX BSKU', `üìä Telemetry data received (screen ${packet.screenId ?? 'unknown'})`);
    
    // –ü–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é —á–µ—Ä–µ–∑ Screen4Parser
    const diagnosticData = Screen4Parser.parse(packet.data, this.systemType);
    
    if (diagnosticData) {
      this.latestData = diagnosticData;
      logService.success('BT-RX', '‚úÖ Telemetry parsed successfully (NEW protocol)');
      
      // –£–≤–µ–¥–æ–º–∏—Ç—å UI –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
      // this.notifyDataListeners(diagnosticData);
    } else {
      logService.error('BT-RX', 'Failed to parse telemetry data');
      logService.info('BT-RX', `Raw data length: ${packet.data.length} bytes`);
    }
  }

  private async sendRaw(bytes: Uint8Array): Promise<void> {
    if (!this.deviceAddress) throw new Error('Not connected');
    const hex = bytesToHex(bytes);
    this.addHexFrame('TX', hex);
    await this.bt.write(bytes);
  }

  private addHexFrame(direction: 'TX' | 'RX', hex: string, checksumOk?: boolean, description?: string): void {
    const frame: HexFrame = {
      direction,
      timestamp: Date.now(),
      hex: hex.toUpperCase(), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ UI
      checksumOk,
      description
    };
    
    this.hexFrames.push(frame);
    
    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–¥—Ä—ã (–∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
    if (this.hexFrames.length > DATA_LIMITS.MAX_HEX_FRAMES) {
      this.hexFrames = this.hexFrames.slice(-DATA_LIMITS.MAX_HEX_FRAMES);
    }
    
    this.onFramesUpdate?.(this.hexFrames);
  }

  setOnFramesUpdate(callback: (frames: HexFrame[]) => void): void {
    this.onFramesUpdate = callback;
  }

  getHexFrames(): HexFrame[] {
    return this.hexFrames;
  }

  getLatestData(): DiagnosticData | null {
    return this.latestData;
  }


  async requestDiagnosticData(): Promise<void> {
    // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å
    logService.info('BT Serial', 'Diagnostic data is polled automatically via cyclic polling');
  }

  async setTestMode(enabled: boolean): Promise<void> {
    logService.warn('BT-TX', 'setTestMode not implemented for new protocol yet');
  }

  async controlRelays(relays: any): Promise<void> {
    logService.warn('BT-TX', 'controlRelays not implemented for new protocol yet');
  }

  getMockData(systemType: string = 'SKA'): DiagnosticData {
    const isSKE = systemType.toUpperCase() === 'SKE';
    
    // Mock –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–ø–æ—Å–ª–µ ADC –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
    return {
      // –ù–∞–ø—Ä—è–∂–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã D_napr1)
      UP_M1: 27.5, UP_M2: 26.8, UP_M3: 27.1, UP_M4: 27.3, UP_M5: 27.0,
      
      // –ü–∞–¥–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–≤ –≤–æ–ª—å—Ç–∞—Ö)
      dUP_M1: 1.2, dUP_M2: 0.8, dUP_M3: 1.5,
      
      // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ ¬∞C –∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü)
      T_air: 22.5,   // –í–æ–∑–¥—É—Ö - —Ç–∞–±–ª–∏—Ü–∞ A (~ADC 0x6A)
      T_isp: -5.2,   // –ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å - —Ç–∞–±–ª–∏—Ü–∞ A (~ADC 0x30)
      T_kmp: 45.8,   // –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä - —Ç–∞–±–ª–∏—Ü–∞ B (~ADC 0x40)
      
      // –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –∏ –¥–∞–≤–ª–µ–Ω–∏–µ (—Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã)
      U_nap: 27.4,   // –í–æ–ª—å—Ç—ã
      U_davl: 1.5,   // –ë–∞—Ä—ã (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è ~ADC 107)
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤
      kUM1_cnd: isSKE ? 3 : 2, kUM2_isp: 1, kUM3_cmp: 1,
      n_V_cnd: isSKE ? 2 : 1, n_V_isp: 1, n_V_cmp: 1,
      PWM_spd: 2,
      condenserFans: isSKE ? [
        { id: 1, status: 'ok' }, { id: 2, status: 'ok' },
        { id: 3, status: 'error', errorMessage: '–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∞ #3 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', repairHint: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ' }
      ] : [
        { id: 1, status: 'ok' },
        { id: 2, status: 'error', errorMessage: '–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∞ #2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', repairHint: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ' }
      ],
      evaporatorFans: [{ id: 1, status: 'ok' }],
      compressorFans: [{ id: 1, status: 'ok' }],
      compressorStatus: 'ok', condenserStatus: 'ok', evaporatorStatus: 'ok',
      pressureSensorStatus: 'ok', 
      
      // Power system mock
      powerStatus: 'ok',
      batteryVoltage: 27.4,
      powerSupplyOk: true,
      
      softStartStatus: 'ok',
      zmk_V_isp1: false, obr_V_isp1: false, zmk_V_knd1: false, obr_V_knd1: true,
      zmk_COMP: false, obr_COMP: false,
      work_rej_cnd: 2, work_rej_isp: 2, work_rej_cmp: 2,
      fuseEtalon: true, fuseCondenser: true, fuseEvaporator: false, fuseCompressor: true,
      signal_SVD: true, signal_ContactNorm: true,
      cikl_COM: 42, cikl_K_line: 38, s1_TMR2: 120, s0_TMR2: 80,
      edlt_cnd_i: 25, edlt_isp_i: 20, edlt_cmp_i: 30, timer_off: 0,
      systemType: systemType.toUpperCase() as 'SKA' | 'SKE',
      mode: 'cooling', sSTATUS: 0x42,
      errors: [{ code: 'F03', severity: 'warning', component: '–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è (Pr3)',
        description: '–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è –ø–µ—Ä–µ–≥–æ—Ä–µ–ª', suggestedFix: '–ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å Pr3' }]
    };
  }
}

export const capacitorBluetoothService = new CapacitorBluetoothService();